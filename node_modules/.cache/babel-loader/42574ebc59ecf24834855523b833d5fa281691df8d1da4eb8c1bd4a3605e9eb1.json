{"ast":null,"code":"import React,{useState,useEffect}from'react';import{supabase}from'../lib/supabase';import{SupabaseService}from'../services/supabaseService';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function SupabaseTest(){const[connectionStatus,setConnectionStatus]=useState('checking');const[testResults,setTestResults]=useState([]);const[isRunningTests,setIsRunningTests]=useState(false);useEffect(()=>{testConnection();},[]);const testConnection=async()=>{try{const{data,error}=await supabase.from('users').select('count').limit(1);if(error){setConnectionStatus('error');setTestResults(prev=>[...prev,\"\\u274C Connection failed: \".concat(error.message)]);}else{setConnectionStatus('connected');setTestResults(prev=>[...prev,'✅ Supabase connection successful']);}}catch(err){setConnectionStatus('error');setTestResults(prev=>[...prev,\"\\u274C Connection error: \".concat(err)]);}};const runTests=async()=>{setIsRunningTests(true);setTestResults([]);const tests=[{name:'Create Test User',test:async()=>{const user=await SupabaseService.createUser('test-user-123','test@example.com');return user?'✅ User created successfully':'❌ Failed to create user';}},{name:'Fetch Test User',test:async()=>{const user=await SupabaseService.getUser('test-user-123');return user?'✅ User fetched successfully':'❌ Failed to fetch user';}},{name:'Create Test Account',test:async()=>{const account=await SupabaseService.createAccount({user_id:'test-user-123',plaid_item_id:'test-item-123',plaid_access_token:'test-token-123',account_id:'test-account-123',account_name:'Test Account',account_type:'checking',account_subtype:'checking',balance:1000.00});return account?'✅ Account created successfully':'❌ Failed to create account';}},{name:'Fetch User Accounts',test:async()=>{const accounts=await SupabaseService.getUserAccounts('test-user-123');return accounts.length>0?'✅ Accounts fetched successfully':'❌ No accounts found';}}];for(const test of tests){try{const result=await test.test();setTestResults(prev=>[...prev,\"\".concat(test.name,\": \").concat(result)]);}catch(error){setTestResults(prev=>[...prev,\"\".concat(test.name,\": \\u274C Test failed - \").concat(error)]);}}setIsRunningTests(false);};const getStatusColor=()=>{switch(connectionStatus){case'connected':return'#10b981';case'error':return'#ef4444';default:return'#6b7280';}};return/*#__PURE__*/_jsxs(\"div\",{style:{padding:'20px',border:'1px solid #e5e7eb',borderRadius:'8px',margin:'20px 0',backgroundColor:'#f9fafb'},children:[/*#__PURE__*/_jsx(\"h3\",{style:{margin:'0 0 16px 0',color:'#374151'},children:\"Supabase Integration Test\"}),/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:'16px'},children:[/*#__PURE__*/_jsx(\"span\",{style:{display:'inline-block',width:'12px',height:'12px',borderRadius:'50%',backgroundColor:getStatusColor(),marginRight:'8px'}}),\"Status: \",connectionStatus==='checking'?'Checking...':connectionStatus==='connected'?'Connected':'Error']}),/*#__PURE__*/_jsx(\"button\",{onClick:runTests,disabled:isRunningTests||connectionStatus==='error',style:{padding:'8px 16px',backgroundColor:connectionStatus==='connected'?'#3b82f6':'#9ca3af',color:'white',border:'none',borderRadius:'4px',cursor:connectionStatus==='connected'?'pointer':'not-allowed',marginBottom:'16px'},children:isRunningTests?'Running Tests...':'Run Database Tests'}),testResults.length>0&&/*#__PURE__*/_jsxs(\"div\",{style:{backgroundColor:'white',padding:'12px',borderRadius:'4px',border:'1px solid #d1d5db'},children:[/*#__PURE__*/_jsx(\"h4\",{style:{margin:'0 0 8px 0',color:'#374151'},children:\"Test Results:\"}),testResults.map((result,index)=>/*#__PURE__*/_jsx(\"div\",{style:{marginBottom:'4px',fontFamily:'monospace'},children:result},index))]}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'16px',fontSize:'14px',color:'#6b7280'},children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Note:\"}),\" Make sure you have:\"]}),/*#__PURE__*/_jsxs(\"ul\",{style:{margin:'8px 0',paddingLeft:'20px'},children:[/*#__PURE__*/_jsx(\"li\",{children:\"Created the database tables using the schema.sql file\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Set up your environment variables (.env file)\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Configured Row Level Security policies\"})]})]})]});}","map":{"version":3,"names":["React","useState","useEffect","supabase","SupabaseService","jsx","_jsx","jsxs","_jsxs","SupabaseTest","connectionStatus","setConnectionStatus","testResults","setTestResults","isRunningTests","setIsRunningTests","testConnection","data","error","from","select","limit","prev","concat","message","err","runTests","tests","name","test","user","createUser","getUser","account","createAccount","user_id","plaid_item_id","plaid_access_token","account_id","account_name","account_type","account_subtype","balance","accounts","getUserAccounts","length","result","getStatusColor","style","padding","border","borderRadius","margin","backgroundColor","children","color","marginBottom","display","width","height","marginRight","onClick","disabled","cursor","map","index","fontFamily","marginTop","fontSize","paddingLeft"],"sources":["C:/Users/aefau/Documents/Become an AI Product Designer/Guidewell/src/components/SupabaseTest.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { supabase } from '../lib/supabase';\r\nimport { SupabaseService } from '../services/supabaseService';\r\n\r\nexport default function SupabaseTest() {\r\n  const [connectionStatus, setConnectionStatus] = useState<'checking' | 'connected' | 'error'>('checking');\r\n  const [testResults, setTestResults] = useState<string[]>([]);\r\n  const [isRunningTests, setIsRunningTests] = useState(false);\r\n\r\n  useEffect(() => {\r\n    testConnection();\r\n  }, []);\r\n\r\n  const testConnection = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .select('count')\r\n        .limit(1);\r\n      \r\n      if (error) {\r\n        setConnectionStatus('error');\r\n        setTestResults(prev => [...prev, `❌ Connection failed: ${error.message}`]);\r\n      } else {\r\n        setConnectionStatus('connected');\r\n        setTestResults(prev => [...prev, '✅ Supabase connection successful']);\r\n      }\r\n    } catch (err) {\r\n      setConnectionStatus('error');\r\n      setTestResults(prev => [...prev, `❌ Connection error: ${err}`]);\r\n    }\r\n  };\r\n\r\n  const runTests = async () => {\r\n    setIsRunningTests(true);\r\n    setTestResults([]);\r\n    \r\n    const tests = [\r\n      {\r\n        name: 'Create Test User',\r\n        test: async () => {\r\n          const user = await SupabaseService.createUser('test-user-123', 'test@example.com');\r\n          return user ? '✅ User created successfully' : '❌ Failed to create user';\r\n        }\r\n      },\r\n      {\r\n        name: 'Fetch Test User',\r\n        test: async () => {\r\n          const user = await SupabaseService.getUser('test-user-123');\r\n          return user ? '✅ User fetched successfully' : '❌ Failed to fetch user';\r\n        }\r\n      },\r\n      {\r\n        name: 'Create Test Account',\r\n        test: async () => {\r\n          const account = await SupabaseService.createAccount({\r\n            user_id: 'test-user-123',\r\n            plaid_item_id: 'test-item-123',\r\n            plaid_access_token: 'test-token-123',\r\n            account_id: 'test-account-123',\r\n            account_name: 'Test Account',\r\n            account_type: 'checking',\r\n            account_subtype: 'checking',\r\n            balance: 1000.00\r\n          });\r\n          return account ? '✅ Account created successfully' : '❌ Failed to create account';\r\n        }\r\n      },\r\n      {\r\n        name: 'Fetch User Accounts',\r\n        test: async () => {\r\n          const accounts = await SupabaseService.getUserAccounts('test-user-123');\r\n          return accounts.length > 0 ? '✅ Accounts fetched successfully' : '❌ No accounts found';\r\n        }\r\n      }\r\n    ];\r\n\r\n    for (const test of tests) {\r\n      try {\r\n        const result = await test.test();\r\n        setTestResults(prev => [...prev, `${test.name}: ${result}`]);\r\n      } catch (error) {\r\n        setTestResults(prev => [...prev, `${test.name}: ❌ Test failed - ${error}`]);\r\n      }\r\n    }\r\n\r\n    setIsRunningTests(false);\r\n  };\r\n\r\n  const getStatusColor = () => {\r\n    switch (connectionStatus) {\r\n      case 'connected': return '#10b981';\r\n      case 'error': return '#ef4444';\r\n      default: return '#6b7280';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ \r\n      padding: '20px', \r\n      border: '1px solid #e5e7eb', \r\n      borderRadius: '8px', \r\n      margin: '20px 0',\r\n      backgroundColor: '#f9fafb'\r\n    }}>\r\n      <h3 style={{ margin: '0 0 16px 0', color: '#374151' }}>\r\n        Supabase Integration Test\r\n      </h3>\r\n      \r\n      <div style={{ marginBottom: '16px' }}>\r\n        <span style={{ \r\n          display: 'inline-block', \r\n          width: '12px', \r\n          height: '12px', \r\n          borderRadius: '50%', \r\n          backgroundColor: getStatusColor(),\r\n          marginRight: '8px'\r\n        }}></span>\r\n        Status: {connectionStatus === 'checking' ? 'Checking...' : \r\n                connectionStatus === 'connected' ? 'Connected' : 'Error'}\r\n      </div>\r\n\r\n      <button \r\n        onClick={runTests}\r\n        disabled={isRunningTests || connectionStatus === 'error'}\r\n        style={{\r\n          padding: '8px 16px',\r\n          backgroundColor: connectionStatus === 'connected' ? '#3b82f6' : '#9ca3af',\r\n          color: 'white',\r\n          border: 'none',\r\n          borderRadius: '4px',\r\n          cursor: connectionStatus === 'connected' ? 'pointer' : 'not-allowed',\r\n          marginBottom: '16px'\r\n        }}\r\n      >\r\n        {isRunningTests ? 'Running Tests...' : 'Run Database Tests'}\r\n      </button>\r\n\r\n      {testResults.length > 0 && (\r\n        <div style={{ \r\n          backgroundColor: 'white', \r\n          padding: '12px', \r\n          borderRadius: '4px',\r\n          border: '1px solid #d1d5db'\r\n        }}>\r\n          <h4 style={{ margin: '0 0 8px 0', color: '#374151' }}>Test Results:</h4>\r\n          {testResults.map((result, index) => (\r\n            <div key={index} style={{ marginBottom: '4px', fontFamily: 'monospace' }}>\r\n              {result}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      <div style={{ marginTop: '16px', fontSize: '14px', color: '#6b7280' }}>\r\n        <p><strong>Note:</strong> Make sure you have:</p>\r\n        <ul style={{ margin: '8px 0', paddingLeft: '20px' }}>\r\n          <li>Created the database tables using the schema.sql file</li>\r\n          <li>Set up your environment variables (.env file)</li>\r\n          <li>Configured Row Level Security policies</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}