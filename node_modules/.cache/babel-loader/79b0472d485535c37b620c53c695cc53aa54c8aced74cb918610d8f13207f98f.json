{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aefau\\\\Documents\\\\Become an AI Product Designer\\\\Guidewell\\\\src\\\\components\\\\PlaidLinkButton.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { usePlaidLink } from 'react-plaid-link';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PlaidLinkButton({\n  userId = 'demo-user-123',\n  onSuccess,\n  apiBase = 'http://localhost:3001'\n}) {\n  _s();\n  const [linkToken, setLinkToken] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    (async () => {\n      try {\n        const r = await fetch(`${apiBase}/plaid/link/token/create`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            userId\n          })\n        });\n        const data = await r.json();\n        setLinkToken(data.link_token);\n      } catch (e) {\n        setError('Failed to init Plaid Link');\n      }\n    })();\n  }, [userId, apiBase]);\n  const config = {\n    token: linkToken || '',\n    onSuccess: async public_token => {\n      try {\n        // Exchange public_token -> access_token (server-side)\n        await fetch(`${apiBase}/plaid/item/public_token/exchange`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            public_token,\n            userId\n          })\n        });\n        // Fetch mapped accounts\n        const r = await fetch(`${apiBase}/plaid/accounts?userId=${encodeURIComponent(userId)}`);\n        const {\n          accounts\n        } = await r.json();\n        onSuccess(accounts);\n      } catch (e) {\n        setError('Link success, but account fetch failed');\n      }\n    },\n    onExit: () => {}\n  };\n  const {\n    open,\n    ready\n  } = usePlaidLink(config);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 21\n  }, this);\n  if (!linkToken) return /*#__PURE__*/_jsxDEV(\"button\", {\n    disabled: true,\n    children: \"Loading Plaid\\u2026\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 26\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => open(),\n    disabled: !ready,\n    children: \"Connect with Plaid\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(PlaidLinkButton, \"1JtzyMbWr6kvMDxrBYHPXdup02k=\", false, function () {\n  return [usePlaidLink];\n});\n_c = PlaidLinkButton;\nvar _c;\n$RefreshReg$(_c, \"PlaidLinkButton\");","map":{"version":3,"names":["useEffect","useState","usePlaidLink","jsxDEV","_jsxDEV","PlaidLinkButton","userId","onSuccess","apiBase","_s","linkToken","setLinkToken","error","setError","r","fetch","method","headers","body","JSON","stringify","data","json","link_token","e","config","token","public_token","encodeURIComponent","accounts","onExit","open","ready","children","fileName","_jsxFileName","lineNumber","columnNumber","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/aefau/Documents/Become an AI Product Designer/Guidewell/src/components/PlaidLinkButton.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { usePlaidLink, PlaidLinkOptions } from 'react-plaid-link';\r\n\r\ntype Props = {\r\n  userId?: string;\r\n  onSuccess: (mappedAccounts: any[]) => void;\r\n  apiBase?: string; // default http://localhost:3001\r\n};\r\n\r\nexport default function PlaidLinkButton({ userId = 'demo-user-123', onSuccess, apiBase = 'http://localhost:3001' }: Props) {\r\n  const [linkToken, setLinkToken] = useState<string | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const r = await fetch(`${apiBase}/plaid/link/token/create`, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ userId }),\r\n        });\r\n        const data = await r.json();\r\n        setLinkToken(data.link_token);\r\n      } catch (e: any) {\r\n        setError('Failed to init Plaid Link');\r\n      }\r\n    })();\r\n  }, [userId, apiBase]);\r\n\r\n  const config: PlaidLinkOptions = {\r\n    token: linkToken || '',\r\n    onSuccess: async (public_token) => {\r\n      try {\r\n        // Exchange public_token -> access_token (server-side)\r\n        await fetch(`${apiBase}/plaid/item/public_token/exchange`, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ public_token, userId }),\r\n        });\r\n        // Fetch mapped accounts\r\n        const r = await fetch(`${apiBase}/plaid/accounts?userId=${encodeURIComponent(userId)}`);\r\n        const { accounts } = await r.json();\r\n        onSuccess(accounts);\r\n      } catch (e) {\r\n        setError('Link success, but account fetch failed');\r\n      }\r\n    },\r\n    onExit: () => {},\r\n  };\r\n\r\n  const { open, ready } = usePlaidLink(config);\r\n\r\n  if (error) return <div>{error}</div>;\r\n  if (!linkToken) return <button disabled>Loading Plaidâ€¦</button>;\r\n  return (\r\n    <button onClick={() => open()} disabled={!ready}>\r\n      Connect with Plaid\r\n    </button>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}