{"ast":null,"code":"import { supabase } from '../lib/supabase';\nexport class SupabaseService {\n  // User operations\n  static async createUser(userId, email) {\n    const {\n      data,\n      error\n    } = await supabase.from('users').upsert({\n      id: userId,\n      email\n    }, {\n      onConflict: 'id'\n    }).select().single();\n    if (error) {\n      console.error('Error creating user:', error);\n      return null;\n    }\n    return data;\n  }\n  static async getUser(userId) {\n    const {\n      data,\n      error\n    } = await supabase.from('users').select('*').eq('id', userId).single();\n    if (error) {\n      console.error('Error fetching user:', error);\n      return null;\n    }\n    return data;\n  }\n\n  // Account operations\n  static async createAccount(accountData) {\n    const {\n      data,\n      error\n    } = await supabase.from('accounts').insert(accountData).select().single();\n    if (error) {\n      console.error('Error creating account:', error);\n      return null;\n    }\n    return data;\n  }\n  static async getUserAccounts(userId) {\n    const {\n      data,\n      error\n    } = await supabase.from('accounts').select('*').eq('user_id', userId);\n    if (error) {\n      console.error('Error fetching accounts:', error);\n      return [];\n    }\n    return data || [];\n  }\n  static async updateAccountBalance(accountId, balance) {\n    const {\n      error\n    } = await supabase.from('accounts').update({\n      balance\n    }).eq('id', accountId);\n    if (error) {\n      console.error('Error updating account balance:', error);\n      return false;\n    }\n    return true;\n  }\n\n  // Transaction operations\n  static async createTransaction(transactionData) {\n    const {\n      data,\n      error\n    } = await supabase.from('transactions').upsert(transactionData, {\n      onConflict: 'account_id,plaid_transaction_id'\n    }).select().single();\n    if (error) {\n      console.error('Error creating transaction:', error);\n      return null;\n    }\n    return data;\n  }\n  static async getAccountTransactions(accountId) {\n    const {\n      data,\n      error\n    } = await supabase.from('transactions').select('*').eq('account_id', accountId).order('date', {\n      ascending: false\n    });\n    if (error) {\n      console.error('Error fetching transactions:', error);\n      return [];\n    }\n    return data || [];\n  }\n  static async getUserTransactions(userId) {\n    const {\n      data,\n      error\n    } = await supabase.from('transactions').select(`\n        *,\n        accounts!inner(user_id)\n      `).eq('accounts.user_id', userId).order('date', {\n      ascending: false\n    });\n    if (error) {\n      console.error('Error fetching user transactions:', error);\n      return [];\n    }\n    return data || [];\n  }\n}","map":{"version":3,"names":["supabase","SupabaseService","createUser","userId","email","data","error","from","upsert","id","onConflict","select","single","console","getUser","eq","createAccount","accountData","insert","getUserAccounts","updateAccountBalance","accountId","balance","update","createTransaction","transactionData","getAccountTransactions","order","ascending","getUserTransactions"],"sources":["C:/Users/aefau/Documents/Become an AI Product Designer/Guidewell/src/services/supabaseService.ts"],"sourcesContent":["import { supabase, User, Account, Transaction } from '../lib/supabase';\r\n\r\nexport class SupabaseService {\r\n  // User operations\r\n  static async createUser(userId: string, email?: string): Promise<User | null> {\r\n    const { data, error } = await supabase\r\n      .from('users')\r\n      .upsert({ id: userId, email }, { onConflict: 'id' })\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) {\r\n      console.error('Error creating user:', error);\r\n      return null;\r\n    }\r\n    \r\n    return data;\r\n  }\r\n\r\n  static async getUser(userId: string): Promise<User | null> {\r\n    const { data, error } = await supabase\r\n      .from('users')\r\n      .select('*')\r\n      .eq('id', userId)\r\n      .single();\r\n    \r\n    if (error) {\r\n      console.error('Error fetching user:', error);\r\n      return null;\r\n    }\r\n    \r\n    return data;\r\n  }\r\n\r\n  // Account operations\r\n  static async createAccount(accountData: Omit<Account, 'id' | 'created_at' | 'updated_at'>): Promise<Account | null> {\r\n    const { data, error } = await supabase\r\n      .from('accounts')\r\n      .insert(accountData)\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) {\r\n      console.error('Error creating account:', error);\r\n      return null;\r\n    }\r\n    \r\n    return data;\r\n  }\r\n\r\n  static async getUserAccounts(userId: string): Promise<Account[]> {\r\n    const { data, error } = await supabase\r\n      .from('accounts')\r\n      .select('*')\r\n      .eq('user_id', userId);\r\n    \r\n    if (error) {\r\n      console.error('Error fetching accounts:', error);\r\n      return [];\r\n    }\r\n    \r\n    return data || [];\r\n  }\r\n\r\n  static async updateAccountBalance(accountId: string, balance: number): Promise<boolean> {\r\n    const { error } = await supabase\r\n      .from('accounts')\r\n      .update({ balance })\r\n      .eq('id', accountId);\r\n    \r\n    if (error) {\r\n      console.error('Error updating account balance:', error);\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  // Transaction operations\r\n  static async createTransaction(transactionData: Omit<Transaction, 'id' | 'created_at'>): Promise<Transaction | null> {\r\n    const { data, error } = await supabase\r\n      .from('transactions')\r\n      .upsert(transactionData, { onConflict: 'account_id,plaid_transaction_id' })\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) {\r\n      console.error('Error creating transaction:', error);\r\n      return null;\r\n    }\r\n    \r\n    return data;\r\n  }\r\n\r\n  static async getAccountTransactions(accountId: string): Promise<Transaction[]> {\r\n    const { data, error } = await supabase\r\n      .from('transactions')\r\n      .select('*')\r\n      .eq('account_id', accountId)\r\n      .order('date', { ascending: false });\r\n    \r\n    if (error) {\r\n      console.error('Error fetching transactions:', error);\r\n      return [];\r\n    }\r\n    \r\n    return data || [];\r\n  }\r\n\r\n  static async getUserTransactions(userId: string): Promise<Transaction[]> {\r\n    const { data, error } = await supabase\r\n      .from('transactions')\r\n      .select(`\r\n        *,\r\n        accounts!inner(user_id)\r\n      `)\r\n      .eq('accounts.user_id', userId)\r\n      .order('date', { ascending: false });\r\n    \r\n    if (error) {\r\n      console.error('Error fetching user transactions:', error);\r\n      return [];\r\n    }\r\n    \r\n    return data || [];\r\n  }\r\n}\r\n\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAoC,iBAAiB;AAEtE,OAAO,MAAMC,eAAe,CAAC;EAC3B;EACA,aAAaC,UAAUA,CAACC,MAAc,EAAEC,KAAc,EAAwB;IAC5E,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMN,QAAQ,CACnCO,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC;MAAEC,EAAE,EAAEN,MAAM;MAAEC;IAAM,CAAC,EAAE;MAAEM,UAAU,EAAE;IAAK,CAAC,CAAC,CACnDC,MAAM,CAAC,CAAC,CACRC,MAAM,CAAC,CAAC;IAEX,IAAIN,KAAK,EAAE;MACTO,OAAO,CAACP,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO,IAAI;IACb;IAEA,OAAOD,IAAI;EACb;EAEA,aAAaS,OAAOA,CAACX,MAAc,EAAwB;IACzD,MAAM;MAAEE,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMN,QAAQ,CACnCO,IAAI,CAAC,OAAO,CAAC,CACbI,MAAM,CAAC,GAAG,CAAC,CACXI,EAAE,CAAC,IAAI,EAAEZ,MAAM,CAAC,CAChBS,MAAM,CAAC,CAAC;IAEX,IAAIN,KAAK,EAAE;MACTO,OAAO,CAACP,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO,IAAI;IACb;IAEA,OAAOD,IAAI;EACb;;EAEA;EACA,aAAaW,aAAaA,CAACC,WAA8D,EAA2B;IAClH,MAAM;MAAEZ,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMN,QAAQ,CACnCO,IAAI,CAAC,UAAU,CAAC,CAChBW,MAAM,CAACD,WAAW,CAAC,CACnBN,MAAM,CAAC,CAAC,CACRC,MAAM,CAAC,CAAC;IAEX,IAAIN,KAAK,EAAE;MACTO,OAAO,CAACP,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAO,IAAI;IACb;IAEA,OAAOD,IAAI;EACb;EAEA,aAAac,eAAeA,CAAChB,MAAc,EAAsB;IAC/D,MAAM;MAAEE,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMN,QAAQ,CACnCO,IAAI,CAAC,UAAU,CAAC,CAChBI,MAAM,CAAC,GAAG,CAAC,CACXI,EAAE,CAAC,SAAS,EAAEZ,MAAM,CAAC;IAExB,IAAIG,KAAK,EAAE;MACTO,OAAO,CAACP,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,OAAO,EAAE;IACX;IAEA,OAAOD,IAAI,IAAI,EAAE;EACnB;EAEA,aAAae,oBAAoBA,CAACC,SAAiB,EAAEC,OAAe,EAAoB;IACtF,MAAM;MAAEhB;IAAM,CAAC,GAAG,MAAMN,QAAQ,CAC7BO,IAAI,CAAC,UAAU,CAAC,CAChBgB,MAAM,CAAC;MAAED;IAAQ,CAAC,CAAC,CACnBP,EAAE,CAAC,IAAI,EAAEM,SAAS,CAAC;IAEtB,IAAIf,KAAK,EAAE;MACTO,OAAO,CAACP,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,OAAO,KAAK;IACd;IAEA,OAAO,IAAI;EACb;;EAEA;EACA,aAAakB,iBAAiBA,CAACC,eAAuD,EAA+B;IACnH,MAAM;MAAEpB,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMN,QAAQ,CACnCO,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,CAACiB,eAAe,EAAE;MAAEf,UAAU,EAAE;IAAkC,CAAC,CAAC,CAC1EC,MAAM,CAAC,CAAC,CACRC,MAAM,CAAC,CAAC;IAEX,IAAIN,KAAK,EAAE;MACTO,OAAO,CAACP,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,OAAO,IAAI;IACb;IAEA,OAAOD,IAAI;EACb;EAEA,aAAaqB,sBAAsBA,CAACL,SAAiB,EAA0B;IAC7E,MAAM;MAAEhB,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMN,QAAQ,CACnCO,IAAI,CAAC,cAAc,CAAC,CACpBI,MAAM,CAAC,GAAG,CAAC,CACXI,EAAE,CAAC,YAAY,EAAEM,SAAS,CAAC,CAC3BM,KAAK,CAAC,MAAM,EAAE;MAAEC,SAAS,EAAE;IAAM,CAAC,CAAC;IAEtC,IAAItB,KAAK,EAAE;MACTO,OAAO,CAACP,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAO,EAAE;IACX;IAEA,OAAOD,IAAI,IAAI,EAAE;EACnB;EAEA,aAAawB,mBAAmBA,CAAC1B,MAAc,EAA0B;IACvE,MAAM;MAAEE,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMN,QAAQ,CACnCO,IAAI,CAAC,cAAc,CAAC,CACpBI,MAAM,CAAC;AACd;AACA;AACA,OAAO,CAAC,CACDI,EAAE,CAAC,kBAAkB,EAAEZ,MAAM,CAAC,CAC9BwB,KAAK,CAAC,MAAM,EAAE;MAAEC,SAAS,EAAE;IAAM,CAAC,CAAC;IAEtC,IAAItB,KAAK,EAAE;MACTO,OAAO,CAACP,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,OAAO,EAAE;IACX;IAEA,OAAOD,IAAI,IAAI,EAAE;EACnB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}