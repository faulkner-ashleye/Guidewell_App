{"ast":null,"code":"import{useEffect,useState,useRef}from'react';import{usePlaidLink}from'react-plaid-link';// Global state to track if Plaid Link is already initialized\nlet globalPlaidInitialized=false;let globalLinkToken=null;let globalConfig=null;let componentCount=0;export function usePlaidLinkSingleton(config){const[isReady,setIsReady]=useState(false);const[error,setError]=useState(null);const initializedRef=useRef(false);const componentId=useRef(++componentCount);useEffect(()=>{console.log(\"Component \".concat(componentId.current,\": usePlaidLinkSingleton effect running\"));// If Plaid Link is already initialized globally, don't initialize again\nif(globalPlaidInitialized&&globalLinkToken===config.token){console.log(\"Component \".concat(componentId.current,\": Using existing global Plaid instance\"));setIsReady(true);return;}// If this component already initialized, don't initialize again\nif(initializedRef.current){console.log(\"Component \".concat(componentId.current,\": Already initialized, skipping\"));return;}// Only initialize if we have a token and haven't initialized yet\nif(config.token&&!globalPlaidInitialized){console.log(\"Component \".concat(componentId.current,\": Initializing global Plaid Link\"));globalPlaidInitialized=true;globalLinkToken=config.token;globalConfig=config;initializedRef.current=true;setIsReady(true);}},[config.token]);// Cleanup on unmount\nuseEffect(()=>{return()=>{console.log(\"Component \".concat(componentId.current,\": Cleaning up\"));};},[]);// Return the global config if available, otherwise return the passed config\nconst effectiveConfig=globalConfig||config;const{open,ready}=usePlaidLink(effectiveConfig);return{open,ready:ready&&isReady,error};}","map":{"version":3,"names":["useEffect","useState","useRef","usePlaidLink","globalPlaidInitialized","globalLinkToken","globalConfig","componentCount","usePlaidLinkSingleton","config","isReady","setIsReady","error","setError","initializedRef","componentId","console","log","concat","current","token","effectiveConfig","open","ready"],"sources":["C:/Users/aefau/Documents/Become an AI Product Designer/Guidewell/src/hooks/usePlaidLinkSingleton.ts"],"sourcesContent":["import { useEffect, useState, useRef } from 'react';\nimport { usePlaidLink, PlaidLinkOptions } from 'react-plaid-link';\n\n// Global state to track if Plaid Link is already initialized\nlet globalPlaidInitialized = false;\nlet globalLinkToken: string | null = null;\nlet globalConfig: PlaidLinkOptions | null = null;\nlet componentCount = 0;\n\nexport function usePlaidLinkSingleton(config: PlaidLinkOptions) {\n  const [isReady, setIsReady] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const initializedRef = useRef(false);\n  const componentId = useRef(++componentCount);\n\n  useEffect(() => {\n    console.log(`Component ${componentId.current}: usePlaidLinkSingleton effect running`);\n    \n    // If Plaid Link is already initialized globally, don't initialize again\n    if (globalPlaidInitialized && globalLinkToken === config.token) {\n      console.log(`Component ${componentId.current}: Using existing global Plaid instance`);\n      setIsReady(true);\n      return;\n    }\n\n    // If this component already initialized, don't initialize again\n    if (initializedRef.current) {\n      console.log(`Component ${componentId.current}: Already initialized, skipping`);\n      return;\n    }\n\n    // Only initialize if we have a token and haven't initialized yet\n    if (config.token && !globalPlaidInitialized) {\n      console.log(`Component ${componentId.current}: Initializing global Plaid Link`);\n      globalPlaidInitialized = true;\n      globalLinkToken = config.token;\n      globalConfig = config;\n      initializedRef.current = true;\n      setIsReady(true);\n    }\n  }, [config.token]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      console.log(`Component ${componentId.current}: Cleaning up`);\n    };\n  }, []);\n\n  // Return the global config if available, otherwise return the passed config\n  const effectiveConfig = globalConfig || config;\n  \n  const { open, ready } = usePlaidLink(effectiveConfig);\n\n  return {\n    open,\n    ready: ready && isReady,\n    error\n  };\n}\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,QAAQ,CAAEC,MAAM,KAAQ,OAAO,CACnD,OAASC,YAAY,KAA0B,kBAAkB,CAEjE;AACA,GAAI,CAAAC,sBAAsB,CAAG,KAAK,CAClC,GAAI,CAAAC,eAA8B,CAAG,IAAI,CACzC,GAAI,CAAAC,YAAqC,CAAG,IAAI,CAChD,GAAI,CAAAC,cAAc,CAAG,CAAC,CAEtB,MAAO,SAAS,CAAAC,qBAAqBA,CAACC,MAAwB,CAAE,CAC9D,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGV,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACW,KAAK,CAAEC,QAAQ,CAAC,CAAGZ,QAAQ,CAAgB,IAAI,CAAC,CACvD,KAAM,CAAAa,cAAc,CAAGZ,MAAM,CAAC,KAAK,CAAC,CACpC,KAAM,CAAAa,WAAW,CAAGb,MAAM,CAAC,EAAEK,cAAc,CAAC,CAE5CP,SAAS,CAAC,IAAM,CACdgB,OAAO,CAACC,GAAG,cAAAC,MAAA,CAAcH,WAAW,CAACI,OAAO,0CAAwC,CAAC,CAErF;AACA,GAAIf,sBAAsB,EAAIC,eAAe,GAAKI,MAAM,CAACW,KAAK,CAAE,CAC9DJ,OAAO,CAACC,GAAG,cAAAC,MAAA,CAAcH,WAAW,CAACI,OAAO,0CAAwC,CAAC,CACrFR,UAAU,CAAC,IAAI,CAAC,CAChB,OACF,CAEA;AACA,GAAIG,cAAc,CAACK,OAAO,CAAE,CAC1BH,OAAO,CAACC,GAAG,cAAAC,MAAA,CAAcH,WAAW,CAACI,OAAO,mCAAiC,CAAC,CAC9E,OACF,CAEA;AACA,GAAIV,MAAM,CAACW,KAAK,EAAI,CAAChB,sBAAsB,CAAE,CAC3CY,OAAO,CAACC,GAAG,cAAAC,MAAA,CAAcH,WAAW,CAACI,OAAO,oCAAkC,CAAC,CAC/Ef,sBAAsB,CAAG,IAAI,CAC7BC,eAAe,CAAGI,MAAM,CAACW,KAAK,CAC9Bd,YAAY,CAAGG,MAAM,CACrBK,cAAc,CAACK,OAAO,CAAG,IAAI,CAC7BR,UAAU,CAAC,IAAI,CAAC,CAClB,CACF,CAAC,CAAE,CAACF,MAAM,CAACW,KAAK,CAAC,CAAC,CAElB;AACApB,SAAS,CAAC,IAAM,CACd,MAAO,IAAM,CACXgB,OAAO,CAACC,GAAG,cAAAC,MAAA,CAAcH,WAAW,CAACI,OAAO,iBAAe,CAAC,CAC9D,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAE,eAAe,CAAGf,YAAY,EAAIG,MAAM,CAE9C,KAAM,CAAEa,IAAI,CAAEC,KAAM,CAAC,CAAGpB,YAAY,CAACkB,eAAe,CAAC,CAErD,MAAO,CACLC,IAAI,CACJC,KAAK,CAAEA,KAAK,EAAIb,OAAO,CACvBE,KACF,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}