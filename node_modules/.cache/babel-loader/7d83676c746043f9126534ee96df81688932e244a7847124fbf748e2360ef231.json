{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aefau\\\\Documents\\\\Become an AI Product Designer\\\\Guidewell\\\\src\\\\components\\\\PlaidLinkButton.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useCallback } from 'react';\nimport { usePlaidLink } from 'react-plaid-link';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PlaidLinkButton({\n  userId = 'demo-user-123',\n  onSuccess,\n  apiBase = 'http://localhost:3001'\n}) {\n  _s();\n  const [linkToken, setLinkToken] = useState(null);\n  const [error, setError] = useState(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const handleSuccess = useCallback(async public_token => {\n    try {\n      // Exchange public_token -> access_token (server-side)\n      await fetch(`${apiBase}/plaid/item/public_token/exchange`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          public_token,\n          userId\n        })\n      });\n      // Fetch mapped accounts\n      const r = await fetch(`${apiBase}/plaid/accounts?userId=${encodeURIComponent(userId)}`);\n      const {\n        accounts\n      } = await r.json();\n      onSuccess(accounts);\n    } catch (e) {\n      setError('Link success, but account fetch failed');\n    }\n  }, [apiBase, userId, onSuccess]);\n  useEffect(() => {\n    let isMounted = true;\n    (async () => {\n      try {\n        console.log('Fetching link token from:', `${apiBase}/plaid/link/token/create`);\n        const r = await fetch(`${apiBase}/plaid/link/token/create`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            userId\n          })\n        });\n        if (!r.ok) {\n          throw new Error(`HTTP ${r.status}: ${r.statusText}`);\n        }\n        const data = await r.json();\n        console.log('Received link token:', data);\n        if (isMounted) {\n          setLinkToken(data.link_token);\n          setIsInitialized(true);\n        }\n      } catch (e) {\n        console.error('Plaid Link initialization error:', e);\n        if (isMounted) {\n          setError(`Failed to init Plaid Link: ${e.message}`);\n        }\n      }\n    })();\n    return () => {\n      isMounted = false;\n    };\n  }, [userId, apiBase]);\n  const config = {\n    token: linkToken || '',\n    onSuccess: handleSuccess,\n    onExit: () => {}\n  };\n  const {\n    open,\n    ready\n  } = usePlaidLink(config);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 21\n  }, this);\n  if (!isInitialized || !linkToken) return /*#__PURE__*/_jsxDEV(\"button\", {\n    disabled: true,\n    children: \"Loading Plaid\\u2026\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 44\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => open(),\n    disabled: !ready,\n    children: \"Connect with Plaid\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(PlaidLinkButton, \"EjHaTVMZOBAPZ4f605qiysTMCMw=\", false, function () {\n  return [usePlaidLink];\n});\n_c = PlaidLinkButton;\nvar _c;\n$RefreshReg$(_c, \"PlaidLinkButton\");","map":{"version":3,"names":["useEffect","useState","useCallback","usePlaidLink","jsxDEV","_jsxDEV","PlaidLinkButton","userId","onSuccess","apiBase","_s","linkToken","setLinkToken","error","setError","isInitialized","setIsInitialized","handleSuccess","public_token","fetch","method","headers","body","JSON","stringify","r","encodeURIComponent","accounts","json","e","isMounted","console","log","ok","Error","status","statusText","data","link_token","message","config","token","onExit","open","ready","children","fileName","_jsxFileName","lineNumber","columnNumber","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/aefau/Documents/Become an AI Product Designer/Guidewell/src/components/PlaidLinkButton.tsx"],"sourcesContent":["import { useEffect, useState, useCallback, useRef } from 'react';\r\nimport { usePlaidLink, PlaidLinkOptions } from 'react-plaid-link';\r\n\r\ntype Props = {\r\n  userId?: string;\r\n  onSuccess: (mappedAccounts: any[]) => void;\r\n  apiBase?: string; // default http://localhost:3001\r\n};\r\n\r\nexport default function PlaidLinkButton({ userId = 'demo-user-123', onSuccess, apiBase = 'http://localhost:3001' }: Props) {\r\n  const [linkToken, setLinkToken] = useState<string | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [isInitialized, setIsInitialized] = useState(false);\r\n\r\n  const handleSuccess = useCallback(async (public_token: string) => {\r\n    try {\r\n      // Exchange public_token -> access_token (server-side)\r\n      await fetch(`${apiBase}/plaid/item/public_token/exchange`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ public_token, userId }),\r\n      });\r\n      // Fetch mapped accounts\r\n      const r = await fetch(`${apiBase}/plaid/accounts?userId=${encodeURIComponent(userId)}`);\r\n      const { accounts } = await r.json();\r\n      onSuccess(accounts);\r\n    } catch (e) {\r\n      setError('Link success, but account fetch failed');\r\n    }\r\n  }, [apiBase, userId, onSuccess]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    \r\n    (async () => {\r\n      try {\r\n        console.log('Fetching link token from:', `${apiBase}/plaid/link/token/create`);\r\n        const r = await fetch(`${apiBase}/plaid/link/token/create`, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ userId }),\r\n        });\r\n        \r\n        if (!r.ok) {\r\n          throw new Error(`HTTP ${r.status}: ${r.statusText}`);\r\n        }\r\n        \r\n        const data = await r.json();\r\n        console.log('Received link token:', data);\r\n        \r\n        if (isMounted) {\r\n          setLinkToken(data.link_token);\r\n          setIsInitialized(true);\r\n        }\r\n      } catch (e: any) {\r\n        console.error('Plaid Link initialization error:', e);\r\n        if (isMounted) {\r\n          setError(`Failed to init Plaid Link: ${e.message}`);\r\n        }\r\n      }\r\n    })();\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [userId, apiBase]);\r\n\r\n  const config: PlaidLinkOptions = {\r\n    token: linkToken || '',\r\n    onSuccess: handleSuccess,\r\n    onExit: () => {},\r\n  };\r\n\r\n  const { open, ready } = usePlaidLink(config);\r\n\r\n  if (error) return <div>{error}</div>;\r\n  if (!isInitialized || !linkToken) return <button disabled>Loading Plaidâ€¦</button>;\r\n  \r\n  return (\r\n    <button onClick={() => open()} disabled={!ready}>\r\n      Connect with Plaid\r\n    </button>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}