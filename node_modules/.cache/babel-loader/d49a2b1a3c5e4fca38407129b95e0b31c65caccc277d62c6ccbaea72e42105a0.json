{"ast":null,"code":"import{supabase}from'../lib/supabase';export class SupabaseService{// User operations\nstatic async createUser(userId,email){const{data,error}=await supabase.from('users').upsert({id:userId,email},{onConflict:'id'}).select().single();if(error){console.error('Error creating user:',error);return null;}return data;}static async getUser(userId){const{data,error}=await supabase.from('users').select('*').eq('id',userId).single();if(error){console.error('Error fetching user:',error);return null;}return data;}// Account operations\nstatic async createAccount(accountData){const{data,error}=await supabase.from('accounts').insert(accountData).select().single();if(error){console.error('Error creating account:',error);return null;}return data;}static async getUserAccounts(userId){const{data,error}=await supabase.from('accounts').select('*').eq('user_id',userId);if(error){console.error('Error fetching accounts:',error);return[];}return data||[];}static async updateAccountBalance(accountId,balance){const{error}=await supabase.from('accounts').update({balance}).eq('id',accountId);if(error){console.error('Error updating account balance:',error);return false;}return true;}// Transaction operations\nstatic async createTransaction(transactionData){const{data,error}=await supabase.from('transactions').upsert(transactionData,{onConflict:'account_id,plaid_transaction_id'}).select().single();if(error){console.error('Error creating transaction:',error);return null;}return data;}static async getAccountTransactions(accountId){const{data,error}=await supabase.from('transactions').select('*').eq('account_id',accountId).order('date',{ascending:false});if(error){console.error('Error fetching transactions:',error);return[];}return data||[];}static async getUserTransactions(userId){const{data,error}=await supabase.from('transactions').select(\"\\n        *,\\n        accounts!inner(user_id)\\n      \").eq('accounts.user_id',userId).order('date',{ascending:false});if(error){console.error('Error fetching user transactions:',error);return[];}return data||[];}}","map":{"version":3,"names":["supabase","SupabaseService","createUser","userId","email","data","error","from","upsert","id","onConflict","select","single","console","getUser","eq","createAccount","accountData","insert","getUserAccounts","updateAccountBalance","accountId","balance","update","createTransaction","transactionData","getAccountTransactions","order","ascending","getUserTransactions"],"sources":["C:/Users/aefau/Documents/Become an AI Product Designer/Guidewell/src/services/supabaseService.ts"],"sourcesContent":["import { supabase, User, Account, Transaction } from '../lib/supabase';\n\nexport class SupabaseService {\n  // User operations\n  static async createUser(userId: string, email?: string): Promise<User | null> {\n    const { data, error } = await supabase\n      .from('users')\n      .upsert({ id: userId, email }, { onConflict: 'id' })\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error creating user:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  static async getUser(userId: string): Promise<User | null> {\n    const { data, error } = await supabase\n      .from('users')\n      .select('*')\n      .eq('id', userId)\n      .single();\n    \n    if (error) {\n      console.error('Error fetching user:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  // Account operations\n  static async createAccount(accountData: Omit<Account, 'id' | 'created_at' | 'updated_at'>): Promise<Account | null> {\n    const { data, error } = await supabase\n      .from('accounts')\n      .insert(accountData)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error creating account:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  static async getUserAccounts(userId: string): Promise<Account[]> {\n    const { data, error } = await supabase\n      .from('accounts')\n      .select('*')\n      .eq('user_id', userId);\n    \n    if (error) {\n      console.error('Error fetching accounts:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  static async updateAccountBalance(accountId: string, balance: number): Promise<boolean> {\n    const { error } = await supabase\n      .from('accounts')\n      .update({ balance })\n      .eq('id', accountId);\n    \n    if (error) {\n      console.error('Error updating account balance:', error);\n      return false;\n    }\n    \n    return true;\n  }\n\n  // Transaction operations\n  static async createTransaction(transactionData: Omit<Transaction, 'id' | 'created_at'>): Promise<Transaction | null> {\n    const { data, error } = await supabase\n      .from('transactions')\n      .upsert(transactionData, { onConflict: 'account_id,plaid_transaction_id' })\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error creating transaction:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  static async getAccountTransactions(accountId: string): Promise<Transaction[]> {\n    const { data, error } = await supabase\n      .from('transactions')\n      .select('*')\n      .eq('account_id', accountId)\n      .order('date', { ascending: false });\n    \n    if (error) {\n      console.error('Error fetching transactions:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  static async getUserTransactions(userId: string): Promise<Transaction[]> {\n    const { data, error } = await supabase\n      .from('transactions')\n      .select(`\n        *,\n        accounts!inner(user_id)\n      `)\n      .eq('accounts.user_id', userId)\n      .order('date', { ascending: false });\n    \n    if (error) {\n      console.error('Error fetching user transactions:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}