{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from 'react';\nimport { usePlaidLink } from 'react-plaid-link';\n\n// Global state to track if Plaid Link is already initialized\nlet globalPlaidInitialized = false;\nlet globalLinkToken = null;\nlet globalConfig = null;\nlet componentCount = 0;\nexport function usePlaidLinkSingleton(config) {\n  _s();\n  const [isReady, setIsReady] = useState(false);\n  const [error, setError] = useState(null);\n  const initializedRef = useRef(false);\n  const componentId = useRef(++componentCount);\n  useEffect(() => {\n    console.log(`Component ${componentId.current}: usePlaidLinkSingleton effect running`);\n\n    // If Plaid Link is already initialized globally, don't initialize again\n    if (globalPlaidInitialized && globalLinkToken === config.token) {\n      console.log(`Component ${componentId.current}: Using existing global Plaid instance`);\n      setIsReady(true);\n      return;\n    }\n\n    // If this component already initialized, don't initialize again\n    if (initializedRef.current) {\n      console.log(`Component ${componentId.current}: Already initialized, skipping`);\n      return;\n    }\n\n    // Only initialize if we have a token and haven't initialized yet\n    if (config.token && !globalPlaidInitialized) {\n      console.log(`Component ${componentId.current}: Initializing global Plaid Link`);\n      globalPlaidInitialized = true;\n      globalLinkToken = config.token;\n      globalConfig = config;\n      initializedRef.current = true;\n      setIsReady(true);\n    }\n  }, [config.token]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      console.log(`Component ${componentId.current}: Cleaning up`);\n    };\n  }, []);\n\n  // Return the global config if available, otherwise return the passed config\n  const effectiveConfig = globalConfig || config;\n  const {\n    open,\n    ready\n  } = usePlaidLink(effectiveConfig);\n  return {\n    open,\n    ready: ready && isReady,\n    error\n  };\n}\n_s(usePlaidLinkSingleton, \"+ej7WxXU1QEsYG4iJFfJmwUENGQ=\", false, function () {\n  return [usePlaidLink];\n});","map":{"version":3,"names":["useEffect","useState","useRef","usePlaidLink","globalPlaidInitialized","globalLinkToken","globalConfig","componentCount","usePlaidLinkSingleton","config","_s","isReady","setIsReady","error","setError","initializedRef","componentId","console","log","current","token","effectiveConfig","open","ready"],"sources":["C:/Users/aefau/Documents/Become an AI Product Designer/Guidewell/src/hooks/usePlaidLinkSingleton.ts"],"sourcesContent":["import { useEffect, useState, useRef } from 'react';\nimport { usePlaidLink, PlaidLinkOptions } from 'react-plaid-link';\n\n// Global state to track if Plaid Link is already initialized\nlet globalPlaidInitialized = false;\nlet globalLinkToken: string | null = null;\nlet globalConfig: PlaidLinkOptions | null = null;\nlet componentCount = 0;\n\nexport function usePlaidLinkSingleton(config: PlaidLinkOptions) {\n  const [isReady, setIsReady] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const initializedRef = useRef(false);\n  const componentId = useRef(++componentCount);\n\n  useEffect(() => {\n    console.log(`Component ${componentId.current}: usePlaidLinkSingleton effect running`);\n    \n    // If Plaid Link is already initialized globally, don't initialize again\n    if (globalPlaidInitialized && globalLinkToken === config.token) {\n      console.log(`Component ${componentId.current}: Using existing global Plaid instance`);\n      setIsReady(true);\n      return;\n    }\n\n    // If this component already initialized, don't initialize again\n    if (initializedRef.current) {\n      console.log(`Component ${componentId.current}: Already initialized, skipping`);\n      return;\n    }\n\n    // Only initialize if we have a token and haven't initialized yet\n    if (config.token && !globalPlaidInitialized) {\n      console.log(`Component ${componentId.current}: Initializing global Plaid Link`);\n      globalPlaidInitialized = true;\n      globalLinkToken = config.token;\n      globalConfig = config;\n      initializedRef.current = true;\n      setIsReady(true);\n    }\n  }, [config.token]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      console.log(`Component ${componentId.current}: Cleaning up`);\n    };\n  }, []);\n\n  // Return the global config if available, otherwise return the passed config\n  const effectiveConfig = globalConfig || config;\n  \n  const { open, ready } = usePlaidLink(effectiveConfig);\n\n  return {\n    open,\n    ready: ready && isReady,\n    error\n  };\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AACnD,SAASC,YAAY,QAA0B,kBAAkB;;AAEjE;AACA,IAAIC,sBAAsB,GAAG,KAAK;AAClC,IAAIC,eAA8B,GAAG,IAAI;AACzC,IAAIC,YAAqC,GAAG,IAAI;AAChD,IAAIC,cAAc,GAAG,CAAC;AAEtB,OAAO,SAASC,qBAAqBA,CAACC,MAAwB,EAAE;EAAAC,EAAA;EAC9D,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAMc,cAAc,GAAGb,MAAM,CAAC,KAAK,CAAC;EACpC,MAAMc,WAAW,GAAGd,MAAM,CAAC,EAAEK,cAAc,CAAC;EAE5CP,SAAS,CAAC,MAAM;IACdiB,OAAO,CAACC,GAAG,CAAC,aAAaF,WAAW,CAACG,OAAO,wCAAwC,CAAC;;IAErF;IACA,IAAIf,sBAAsB,IAAIC,eAAe,KAAKI,MAAM,CAACW,KAAK,EAAE;MAC9DH,OAAO,CAACC,GAAG,CAAC,aAAaF,WAAW,CAACG,OAAO,wCAAwC,CAAC;MACrFP,UAAU,CAAC,IAAI,CAAC;MAChB;IACF;;IAEA;IACA,IAAIG,cAAc,CAACI,OAAO,EAAE;MAC1BF,OAAO,CAACC,GAAG,CAAC,aAAaF,WAAW,CAACG,OAAO,iCAAiC,CAAC;MAC9E;IACF;;IAEA;IACA,IAAIV,MAAM,CAACW,KAAK,IAAI,CAAChB,sBAAsB,EAAE;MAC3Ca,OAAO,CAACC,GAAG,CAAC,aAAaF,WAAW,CAACG,OAAO,kCAAkC,CAAC;MAC/Ef,sBAAsB,GAAG,IAAI;MAC7BC,eAAe,GAAGI,MAAM,CAACW,KAAK;MAC9Bd,YAAY,GAAGG,MAAM;MACrBM,cAAc,CAACI,OAAO,GAAG,IAAI;MAC7BP,UAAU,CAAC,IAAI,CAAC;IAClB;EACF,CAAC,EAAE,CAACH,MAAM,CAACW,KAAK,CAAC,CAAC;;EAElB;EACApB,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACXiB,OAAO,CAACC,GAAG,CAAC,aAAaF,WAAW,CAACG,OAAO,eAAe,CAAC;IAC9D,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,eAAe,GAAGf,YAAY,IAAIG,MAAM;EAE9C,MAAM;IAAEa,IAAI;IAAEC;EAAM,CAAC,GAAGpB,YAAY,CAACkB,eAAe,CAAC;EAErD,OAAO;IACLC,IAAI;IACJC,KAAK,EAAEA,KAAK,IAAIZ,OAAO;IACvBE;EACF,CAAC;AACH;AAACH,EAAA,CAlDeF,qBAAqB;EAAA,QA2CXL,YAAY;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}