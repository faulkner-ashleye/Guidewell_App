{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nexport function useStrategyEngine() {\n  _s();\n  const calculateStrategyResult = useCallback(config => {\n    // Placeholder calculation logic - in a real app, this would use actual financial formulas\n    const totalMonths = config.timeline;\n    const monthlyContribution = config.monthlyContribution;\n    const totalContribution = monthlyContribution * totalMonths;\n\n    // Simple growth calculation (placeholder)\n    const growthRate = config.riskLevel === 'high' ? 0.08 : config.riskLevel === 'medium' ? 0.05 : 0.03;\n    const projectedValue = totalContribution * (1 + growthRate);\n    const growth = projectedValue - totalContribution;\n\n    // Generate monthly breakdown (placeholder)\n    const monthlyBreakdown = Array.from({\n      length: totalMonths\n    }, (_, index) => ({\n      month: index + 1,\n      debt: monthlyContribution * (config.allocation.debt / 100),\n      savings: monthlyContribution * (config.allocation.savings / 100),\n      investment: monthlyContribution * (config.allocation.investment / 100),\n      total: monthlyContribution\n    }));\n    return {\n      totalContribution,\n      projectedValue,\n      growth,\n      monthlyBreakdown\n    };\n  }, []);\n  const generateNarrative = useCallback((config, result) => {\n    const {\n      name,\n      timeline,\n      monthlyContribution,\n      allocation\n    } = config;\n    const {\n      projectedValue,\n      growth\n    } = result;\n    return `This scenario shows how ${name} could work over ${timeline} months. \n    With a monthly contribution of $${monthlyContribution.toLocaleString()}, you might allocate \n    ${allocation.debt}% to debt payoff, ${allocation.savings}% to savings, and ${allocation.investment}% to investments. \n    This could potentially grow your money to approximately $${projectedValue.toLocaleString()}, \n    representing a growth of $${growth.toLocaleString()}. Remember, these are educational scenarios \n    and actual results may vary significantly.`;\n  }, []);\n  return {\n    calculateStrategyResult,\n    generateNarrative\n  };\n}\n_s(useStrategyEngine, \"lGx034ljEUn4tzgjgt/1a4Yq8pw=\");","map":{"version":3,"names":["useCallback","useStrategyEngine","_s","calculateStrategyResult","config","totalMonths","timeline","monthlyContribution","totalContribution","growthRate","riskLevel","projectedValue","growth","monthlyBreakdown","Array","from","length","_","index","month","debt","allocation","savings","investment","total","generateNarrative","result","name","toLocaleString"],"sources":["C:/Users/aefau/Documents/Become an AI Product Designer/Guidewell/src/state/useStrategyEngine.ts"],"sourcesContent":["import { useCallback } from 'react';\r\nimport { StrategyConfig, StrategyResult } from '../data/types';\r\n\r\nexport function useStrategyEngine() {\r\n  const calculateStrategyResult = useCallback((config: StrategyConfig): StrategyResult => {\r\n    // Placeholder calculation logic - in a real app, this would use actual financial formulas\r\n    const totalMonths = config.timeline;\r\n    const monthlyContribution = config.monthlyContribution;\r\n    const totalContribution = monthlyContribution * totalMonths;\r\n    \r\n    // Simple growth calculation (placeholder)\r\n    const growthRate = config.riskLevel === 'high' ? 0.08 : config.riskLevel === 'medium' ? 0.05 : 0.03;\r\n    const projectedValue = totalContribution * (1 + growthRate);\r\n    const growth = projectedValue - totalContribution;\r\n    \r\n    // Generate monthly breakdown (placeholder)\r\n    const monthlyBreakdown = Array.from({ length: totalMonths }, (_, index) => ({\r\n      month: index + 1,\r\n      debt: monthlyContribution * (config.allocation.debt / 100),\r\n      savings: monthlyContribution * (config.allocation.savings / 100),\r\n      investment: monthlyContribution * (config.allocation.investment / 100),\r\n      total: monthlyContribution\r\n    }));\r\n    \r\n    return {\r\n      totalContribution,\r\n      projectedValue,\r\n      growth,\r\n      monthlyBreakdown\r\n    };\r\n  }, []);\r\n\r\n  const generateNarrative = useCallback((config: StrategyConfig, result: StrategyResult): string => {\r\n    const { name, timeline, monthlyContribution, allocation } = config;\r\n    const { projectedValue, growth } = result;\r\n    \r\n    return `This scenario shows how ${name} could work over ${timeline} months. \r\n    With a monthly contribution of $${monthlyContribution.toLocaleString()}, you might allocate \r\n    ${allocation.debt}% to debt payoff, ${allocation.savings}% to savings, and ${allocation.investment}% to investments. \r\n    This could potentially grow your money to approximately $${projectedValue.toLocaleString()}, \r\n    representing a growth of $${growth.toLocaleString()}. Remember, these are educational scenarios \r\n    and actual results may vary significantly.`;\r\n  }, []);\r\n\r\n  return {\r\n    calculateStrategyResult,\r\n    generateNarrative\r\n  };\r\n}\r\n\r\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,OAAO;AAGnC,OAAO,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAClC,MAAMC,uBAAuB,GAAGH,WAAW,CAAEI,MAAsB,IAAqB;IACtF;IACA,MAAMC,WAAW,GAAGD,MAAM,CAACE,QAAQ;IACnC,MAAMC,mBAAmB,GAAGH,MAAM,CAACG,mBAAmB;IACtD,MAAMC,iBAAiB,GAAGD,mBAAmB,GAAGF,WAAW;;IAE3D;IACA,MAAMI,UAAU,GAAGL,MAAM,CAACM,SAAS,KAAK,MAAM,GAAG,IAAI,GAAGN,MAAM,CAACM,SAAS,KAAK,QAAQ,GAAG,IAAI,GAAG,IAAI;IACnG,MAAMC,cAAc,GAAGH,iBAAiB,IAAI,CAAC,GAAGC,UAAU,CAAC;IAC3D,MAAMG,MAAM,GAAGD,cAAc,GAAGH,iBAAiB;;IAEjD;IACA,MAAMK,gBAAgB,GAAGC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAEX;IAAY,CAAC,EAAE,CAACY,CAAC,EAAEC,KAAK,MAAM;MAC1EC,KAAK,EAAED,KAAK,GAAG,CAAC;MAChBE,IAAI,EAAEb,mBAAmB,IAAIH,MAAM,CAACiB,UAAU,CAACD,IAAI,GAAG,GAAG,CAAC;MAC1DE,OAAO,EAAEf,mBAAmB,IAAIH,MAAM,CAACiB,UAAU,CAACC,OAAO,GAAG,GAAG,CAAC;MAChEC,UAAU,EAAEhB,mBAAmB,IAAIH,MAAM,CAACiB,UAAU,CAACE,UAAU,GAAG,GAAG,CAAC;MACtEC,KAAK,EAAEjB;IACT,CAAC,CAAC,CAAC;IAEH,OAAO;MACLC,iBAAiB;MACjBG,cAAc;MACdC,MAAM;MACNC;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMY,iBAAiB,GAAGzB,WAAW,CAAC,CAACI,MAAsB,EAAEsB,MAAsB,KAAa;IAChG,MAAM;MAAEC,IAAI;MAAErB,QAAQ;MAAEC,mBAAmB;MAAEc;IAAW,CAAC,GAAGjB,MAAM;IAClE,MAAM;MAAEO,cAAc;MAAEC;IAAO,CAAC,GAAGc,MAAM;IAEzC,OAAO,2BAA2BC,IAAI,oBAAoBrB,QAAQ;AACtE,sCAAsCC,mBAAmB,CAACqB,cAAc,CAAC,CAAC;AAC1E,MAAMP,UAAU,CAACD,IAAI,qBAAqBC,UAAU,CAACC,OAAO,qBAAqBD,UAAU,CAACE,UAAU;AACtG,+DAA+DZ,cAAc,CAACiB,cAAc,CAAC,CAAC;AAC9F,gCAAgChB,MAAM,CAACgB,cAAc,CAAC,CAAC;AACvD,+CAA+C;EAC7C,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLzB,uBAAuB;IACvBsB;EACF,CAAC;AACH;AAACvB,EAAA,CA7CeD,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}