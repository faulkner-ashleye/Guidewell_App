{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from 'react';\nimport { usePlaidLink } from 'react-plaid-link';\n\n// Global state to track if Plaid Link is already initialized\nlet globalPlaidInitialized = false;\nlet globalLinkToken = null;\nlet globalConfig = null;\nexport function usePlaidLinkSingleton(config) {\n  _s();\n  const [isReady, setIsReady] = useState(false);\n  const [error, setError] = useState(null);\n  const initializedRef = useRef(false);\n  useEffect(() => {\n    // If Plaid Link is already initialized globally, don't initialize again\n    if (globalPlaidInitialized && globalLinkToken === config.token) {\n      setIsReady(true);\n      return;\n    }\n\n    // If this component already initialized, don't initialize again\n    if (initializedRef.current) {\n      return;\n    }\n\n    // Only initialize if we have a token and haven't initialized yet\n    if (config.token && !globalPlaidInitialized) {\n      globalPlaidInitialized = true;\n      globalLinkToken = config.token;\n      globalConfig = config;\n      initializedRef.current = true;\n      setIsReady(true);\n      console.log('Plaid Link initialized globally');\n    }\n  }, [config.token]);\n\n  // Return the global config if available, otherwise return the passed config\n  const effectiveConfig = globalConfig || config;\n  const {\n    open,\n    ready\n  } = usePlaidLink(effectiveConfig);\n  return {\n    open,\n    ready: ready && isReady,\n    error\n  };\n}\n_s(usePlaidLinkSingleton, \"wv0A0QbXiUKkysn7EKqxoZfD5mo=\", false, function () {\n  return [usePlaidLink];\n});","map":{"version":3,"names":["useEffect","useState","useRef","usePlaidLink","globalPlaidInitialized","globalLinkToken","globalConfig","usePlaidLinkSingleton","config","_s","isReady","setIsReady","error","setError","initializedRef","token","current","console","log","effectiveConfig","open","ready"],"sources":["C:/Users/aefau/Documents/Become an AI Product Designer/Guidewell/src/hooks/usePlaidLinkSingleton.ts"],"sourcesContent":["import { useEffect, useState, useRef } from 'react';\r\nimport { usePlaidLink, PlaidLinkOptions } from 'react-plaid-link';\r\n\r\n// Global state to track if Plaid Link is already initialized\r\nlet globalPlaidInitialized = false;\r\nlet globalLinkToken: string | null = null;\r\nlet globalConfig: PlaidLinkOptions | null = null;\r\n\r\nexport function usePlaidLinkSingleton(config: PlaidLinkOptions) {\r\n  const [isReady, setIsReady] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const initializedRef = useRef(false);\r\n\r\n  useEffect(() => {\r\n    // If Plaid Link is already initialized globally, don't initialize again\r\n    if (globalPlaidInitialized && globalLinkToken === config.token) {\r\n      setIsReady(true);\r\n      return;\r\n    }\r\n\r\n    // If this component already initialized, don't initialize again\r\n    if (initializedRef.current) {\r\n      return;\r\n    }\r\n\r\n    // Only initialize if we have a token and haven't initialized yet\r\n    if (config.token && !globalPlaidInitialized) {\r\n      globalPlaidInitialized = true;\r\n      globalLinkToken = config.token;\r\n      globalConfig = config;\r\n      initializedRef.current = true;\r\n      setIsReady(true);\r\n      console.log('Plaid Link initialized globally');\r\n    }\r\n  }, [config.token]);\r\n\r\n  // Return the global config if available, otherwise return the passed config\r\n  const effectiveConfig = globalConfig || config;\r\n  \r\n  const { open, ready } = usePlaidLink(effectiveConfig);\r\n\r\n  return {\r\n    open,\r\n    ready: ready && isReady,\r\n    error\r\n  };\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AACnD,SAASC,YAAY,QAA0B,kBAAkB;;AAEjE;AACA,IAAIC,sBAAsB,GAAG,KAAK;AAClC,IAAIC,eAA8B,GAAG,IAAI;AACzC,IAAIC,YAAqC,GAAG,IAAI;AAEhD,OAAO,SAASC,qBAAqBA,CAACC,MAAwB,EAAE;EAAAC,EAAA;EAC9D,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAMa,cAAc,GAAGZ,MAAM,CAAC,KAAK,CAAC;EAEpCF,SAAS,CAAC,MAAM;IACd;IACA,IAAII,sBAAsB,IAAIC,eAAe,KAAKG,MAAM,CAACO,KAAK,EAAE;MAC9DJ,UAAU,CAAC,IAAI,CAAC;MAChB;IACF;;IAEA;IACA,IAAIG,cAAc,CAACE,OAAO,EAAE;MAC1B;IACF;;IAEA;IACA,IAAIR,MAAM,CAACO,KAAK,IAAI,CAACX,sBAAsB,EAAE;MAC3CA,sBAAsB,GAAG,IAAI;MAC7BC,eAAe,GAAGG,MAAM,CAACO,KAAK;MAC9BT,YAAY,GAAGE,MAAM;MACrBM,cAAc,CAACE,OAAO,GAAG,IAAI;MAC7BL,UAAU,CAAC,IAAI,CAAC;MAChBM,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAChD;EACF,CAAC,EAAE,CAACV,MAAM,CAACO,KAAK,CAAC,CAAC;;EAElB;EACA,MAAMI,eAAe,GAAGb,YAAY,IAAIE,MAAM;EAE9C,MAAM;IAAEY,IAAI;IAAEC;EAAM,CAAC,GAAGlB,YAAY,CAACgB,eAAe,CAAC;EAErD,OAAO;IACLC,IAAI;IACJC,KAAK,EAAEA,KAAK,IAAIX,OAAO;IACvBE;EACF,CAAC;AACH;AAACH,EAAA,CAtCeF,qBAAqB;EAAA,QA+BXJ,YAAY;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}