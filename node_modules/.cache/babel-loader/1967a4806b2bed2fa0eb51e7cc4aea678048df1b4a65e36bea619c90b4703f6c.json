{"ast":null,"code":"import{useCallback}from'react';export function useStrategyEngine(){const calculateStrategyResult=useCallback(config=>{// Placeholder calculation logic - in a real app, this would use actual financial formulas\nconst totalMonths=config.timeline;const monthlyContribution=config.monthlyContribution;const totalContribution=monthlyContribution*totalMonths;// Simple growth calculation (placeholder)\nconst growthRate=config.riskLevel==='high'?0.08:config.riskLevel==='medium'?0.05:0.03;const projectedValue=totalContribution*(1+growthRate);const growth=projectedValue-totalContribution;// Generate monthly breakdown (placeholder)\nconst monthlyBreakdown=Array.from({length:totalMonths},(_,index)=>({month:index+1,debt:monthlyContribution*(config.allocation.debt/100),savings:monthlyContribution*(config.allocation.savings/100),investment:monthlyContribution*(config.allocation.investment/100),total:monthlyContribution}));return{totalContribution,projectedValue,growth,monthlyBreakdown};},[]);const generateNarrative=useCallback((config,result)=>{const{name,timeline,monthlyContribution,allocation}=config;const{projectedValue,growth}=result;return\"This scenario shows how \".concat(name,\" could work over \").concat(timeline,\" months. \\n    With a monthly contribution of $\").concat(monthlyContribution.toLocaleString(),\", you might allocate \\n    \").concat(allocation.debt,\"% to debt payoff, \").concat(allocation.savings,\"% to savings, and \").concat(allocation.investment,\"% to investments. \\n    This could potentially grow your money to approximately $\").concat(projectedValue.toLocaleString(),\", \\n    representing a growth of $\").concat(growth.toLocaleString(),\". Remember, these are educational scenarios \\n    and actual results may vary significantly.\");},[]);return{calculateStrategyResult,generateNarrative};}","map":{"version":3,"names":["useCallback","useStrategyEngine","calculateStrategyResult","config","totalMonths","timeline","monthlyContribution","totalContribution","growthRate","riskLevel","projectedValue","growth","monthlyBreakdown","Array","from","length","_","index","month","debt","allocation","savings","investment","total","generateNarrative","result","name","concat","toLocaleString"],"sources":["C:/Users/aefau/Documents/Become an AI Product Designer/Guidewell/src/state/useStrategyEngine.ts"],"sourcesContent":["import { useCallback } from 'react';\r\nimport { StrategyConfig, StrategyResult } from '../data/types';\r\n\r\nexport function useStrategyEngine() {\r\n  const calculateStrategyResult = useCallback((config: StrategyConfig): StrategyResult => {\r\n    // Placeholder calculation logic - in a real app, this would use actual financial formulas\r\n    const totalMonths = config.timeline;\r\n    const monthlyContribution = config.monthlyContribution;\r\n    const totalContribution = monthlyContribution * totalMonths;\r\n    \r\n    // Simple growth calculation (placeholder)\r\n    const growthRate = config.riskLevel === 'high' ? 0.08 : config.riskLevel === 'medium' ? 0.05 : 0.03;\r\n    const projectedValue = totalContribution * (1 + growthRate);\r\n    const growth = projectedValue - totalContribution;\r\n    \r\n    // Generate monthly breakdown (placeholder)\r\n    const monthlyBreakdown = Array.from({ length: totalMonths }, (_, index) => ({\r\n      month: index + 1,\r\n      debt: monthlyContribution * (config.allocation.debt / 100),\r\n      savings: monthlyContribution * (config.allocation.savings / 100),\r\n      investment: monthlyContribution * (config.allocation.investment / 100),\r\n      total: monthlyContribution\r\n    }));\r\n    \r\n    return {\r\n      totalContribution,\r\n      projectedValue,\r\n      growth,\r\n      monthlyBreakdown\r\n    };\r\n  }, []);\r\n\r\n  const generateNarrative = useCallback((config: StrategyConfig, result: StrategyResult): string => {\r\n    const { name, timeline, monthlyContribution, allocation } = config;\r\n    const { projectedValue, growth } = result;\r\n    \r\n    return `This scenario shows how ${name} could work over ${timeline} months. \r\n    With a monthly contribution of $${monthlyContribution.toLocaleString()}, you might allocate \r\n    ${allocation.debt}% to debt payoff, ${allocation.savings}% to savings, and ${allocation.investment}% to investments. \r\n    This could potentially grow your money to approximately $${projectedValue.toLocaleString()}, \r\n    representing a growth of $${growth.toLocaleString()}. Remember, these are educational scenarios \r\n    and actual results may vary significantly.`;\r\n  }, []);\r\n\r\n  return {\r\n    calculateStrategyResult,\r\n    generateNarrative\r\n  };\r\n}\r\n"],"mappings":"AAAA,OAASA,WAAW,KAAQ,OAAO,CAGnC,MAAO,SAAS,CAAAC,iBAAiBA,CAAA,CAAG,CAClC,KAAM,CAAAC,uBAAuB,CAAGF,WAAW,CAAEG,MAAsB,EAAqB,CACtF;AACA,KAAM,CAAAC,WAAW,CAAGD,MAAM,CAACE,QAAQ,CACnC,KAAM,CAAAC,mBAAmB,CAAGH,MAAM,CAACG,mBAAmB,CACtD,KAAM,CAAAC,iBAAiB,CAAGD,mBAAmB,CAAGF,WAAW,CAE3D;AACA,KAAM,CAAAI,UAAU,CAAGL,MAAM,CAACM,SAAS,GAAK,MAAM,CAAG,IAAI,CAAGN,MAAM,CAACM,SAAS,GAAK,QAAQ,CAAG,IAAI,CAAG,IAAI,CACnG,KAAM,CAAAC,cAAc,CAAGH,iBAAiB,EAAI,CAAC,CAAGC,UAAU,CAAC,CAC3D,KAAM,CAAAG,MAAM,CAAGD,cAAc,CAAGH,iBAAiB,CAEjD;AACA,KAAM,CAAAK,gBAAgB,CAAGC,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAEX,WAAY,CAAC,CAAE,CAACY,CAAC,CAAEC,KAAK,IAAM,CAC1EC,KAAK,CAAED,KAAK,CAAG,CAAC,CAChBE,IAAI,CAAEb,mBAAmB,EAAIH,MAAM,CAACiB,UAAU,CAACD,IAAI,CAAG,GAAG,CAAC,CAC1DE,OAAO,CAAEf,mBAAmB,EAAIH,MAAM,CAACiB,UAAU,CAACC,OAAO,CAAG,GAAG,CAAC,CAChEC,UAAU,CAAEhB,mBAAmB,EAAIH,MAAM,CAACiB,UAAU,CAACE,UAAU,CAAG,GAAG,CAAC,CACtEC,KAAK,CAAEjB,mBACT,CAAC,CAAC,CAAC,CAEH,MAAO,CACLC,iBAAiB,CACjBG,cAAc,CACdC,MAAM,CACNC,gBACF,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAY,iBAAiB,CAAGxB,WAAW,CAAC,CAACG,MAAsB,CAAEsB,MAAsB,GAAa,CAChG,KAAM,CAAEC,IAAI,CAAErB,QAAQ,CAAEC,mBAAmB,CAAEc,UAAW,CAAC,CAAGjB,MAAM,CAClE,KAAM,CAAEO,cAAc,CAAEC,MAAO,CAAC,CAAGc,MAAM,CAEzC,iCAAAE,MAAA,CAAkCD,IAAI,sBAAAC,MAAA,CAAoBtB,QAAQ,oDAAAsB,MAAA,CAChCrB,mBAAmB,CAACsB,cAAc,CAAC,CAAC,gCAAAD,MAAA,CACpEP,UAAU,CAACD,IAAI,uBAAAQ,MAAA,CAAqBP,UAAU,CAACC,OAAO,uBAAAM,MAAA,CAAqBP,UAAU,CAACE,UAAU,sFAAAK,MAAA,CACvCjB,cAAc,CAACkB,cAAc,CAAC,CAAC,uCAAAD,MAAA,CAC9DhB,MAAM,CAACiB,cAAc,CAAC,CAAC,iGAErD,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CACL1B,uBAAuB,CACvBsB,iBACF,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}